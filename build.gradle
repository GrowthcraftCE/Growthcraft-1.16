buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id "org.sonarqube" version "3.3"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.projectKey", "GrowthcraftCE_Growthcraft-1.16"
        property "sonar.organization", "growthcraftce"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

repositories {
    mavenLocal()
    // JEI, Tinker's Construct, Mantle, Iron Chests, Natura, etc.
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    // The One Probe
    maven { url = "https://maven.tterrag.com/" }
    // Patchouli
    maven { url = 'https://maven.blamejared.com' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    // Curse Forge
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

version = project.growthcraft_version as String
group = 'growthcraft'
archivesBaseName = 'growthcraft'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println("==============================")
println("${System.getProperty('java.vendor')}: ${System.getProperty('java.version')} (${System.getProperty('java.vm.version')}/${System.getProperty('os.arch')})")
println("==============================")

minecraft {
    // MCP Mappings
    mappings channel: 'snapshot', version: project.mappings_version

    // Access Transformer
    accessTransformer = file 'src/main/resources/META-INF/access-transformer.cfg'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                growthcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                growthcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'growthcraft', '--all', '--output', file('src/generated/resources/')
            mods {
                growthcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    /** Compile time Dependencies
     * Include mods that we have a direct dependency with.
     */
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")

    /** Runtime Dependencies
     *  Include mods the we need while testing during runtime. When adding mods
     *  to this list, place the version into the gradle.properties file.
     */
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${minecraft_version_short}:${minecraft_version_short}-${theoneprobe_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'src'
}

task deobjJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives sourcesJar, deobjJar
}

jar {
    manifest {
        attributes([
            "Specification-Title": "growthcraft",
            "Specification-Vendor": "growthcraft",
            "Specification-Version": "6",
            "Implementation-Title": project.name,
            "Implementation-Version": "${growthcraft_version}",
            "Implementation-Vendor" :"growthcraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
